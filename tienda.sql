DROP DATABASE IF EXISTS TIENDA;
CREATE DATABASE TIENDA;
USE TIENDA;

-- Creamos las cuatro tablas.
CREATE TABLE CLIENTE (
NIF CHAR(9) PRIMARY KEY,NOMBRE VARCHAR(50),DOMICILIO VARCHAR(100),
TLF VARCHAR(25),CIUDAD VARCHAR(25)
);

CREATE TABLE PRODUCTO (
CODIGO CHAR(4) PRIMARY KEY,DESCRIPCION VARCHAR(100),PRECIO FLOAT,
STOCK INT, MINIMO INT
);

CREATE TABLE FACTURA (
 NUMERO INT PRIMARY KEY, FECHA DATE, PAGADO BOOL, NIF CHAR(9),
 FOREIGN KEY (NIF) REFERENCES CLIENTE(NIF)
);

CREATE TABLE DETALLE (
 ID INT PRIMARY KEY,  NUMERO INT, CODIGO CHAR(4), UNIDADES INT, PRECIO FLOAT,
 FOREIGN KEY (NUMERO) REFERENCES FACTURA(NUMERO),
FOREIGN KEY (CODIGO) REFERENCES PRODUCTO(CODIGO)
);

-- Añadimos registros en todas las tablas.
INSERT INTO CLIENTE VALUES 
("11111111A", "ROSA PEREZ DELGADO", "C/ ASTRO, 25", "913678090", "MADRID");
INSERT INTO CLIENTE VALUES 
("22222222B", "MARIANO RODOLFO DEL VALL", "C/ SOL, 7", "616667788", "SEVILLA");
INSERT INTO CLIENTE VALUES 
("33333333C", "CARLOS MALDONADO PEREZ", "C/ LUNA, 9", "617771166", "SEVILLA");
INSERT INTO CLIENTE VALUES 
("44444444C", "PERICO DE LOS PALOTES LARGOS", "C/ OCA, 9", "67778877", "MADRID");
INSERT INTO CLIENTE VALUES 
("55555555D", "DANIEL PEREZ DELGADO", "C/ ESTRELLA, 30", "913678091", "BARCELONA");
INSERT INTO CLIENTE VALUES 
("66666666H", "DELGADO PEREZ MARISA", "C/ ESTRELLA, 30", "913678091", "BARCELONA");

INSERT INTO PRODUCTO VALUES ('CHA9', 'CHANDAL DE NIÑO 9-10 AÑOS', 25.50, 7, 10);
INSERT INTO PRODUCTO VALUES ('CH11', 'CHANDAL DE NIÑO 11-12 AÑOS', 25.50, 8, 10);
INSERT INTO PRODUCTO VALUES ('CORH', 'CORTA VIENTOS HOMBRE', 15, 3, 5);
INSERT INTO PRODUCTO VALUES ('CORM', 'CORTA VIENTOS MUJER', 15, 5, 7);
INSERT INTO PRODUCTO VALUES ('PA10', 'PANTALÓN CORTO 10-11 AÑOS', 10, 8, 10);
INSERT INTO PRODUCTO VALUES ('PA12', 'PANTALÓN CORTO 12.13 AÑOS', 10, 4, 10);
INSERT INTO PRODUCTO VALUES ('BAF5', 'BALÓN DE FUTBOL Nº 5', 7, 5, 8);
INSERT INTO PRODUCTO VALUES ('BAF4', 'BALÓN DE FUTBOL Nº 4', 6, 4, 8);
INSERT INTO PRODUCTO VALUES ('BAB5', 'BALÓN DE BALONCESTO Nº 5', 7, 5, 8);
INSERT INTO PRODUCTO VALUES ('BAB4', 'BALÓN DE BALONCESTO Nº 4', 6, 3, 8);
INSERT INTO PRODUCTO VALUES ('BI20', 'BICICLETA 20 PULGADAS', 150, 2, 4);
INSERT INTO PRODUCTO VALUES ('CORD', 'CORTA VIENTOS MUJER', 15, 5, 7);
INSERT INTO PRODUCTO VALUES ('CORP', 'CORTA VIENTOS HOMBRE', 15, 3, 5);
INSERT INTO PRODUCTO VALUES ('CNKE', 'CAMISETA NIKE', 30, 4, 9);

INSERT INTO FACTURA VALUES (5000, '2021/05/15', TRUE, '11111111A');
INSERT INTO FACTURA VALUES (5001, '2021/05/16', TRUE, '11111111A');
INSERT INTO FACTURA VALUES (5002, '2021/06/18', TRUE, '22222222B');
INSERT INTO FACTURA VALUES (5003, '2021/06/18', TRUE, '22222222B');
INSERT INTO FACTURA VALUES (5004, '2021/07/19', TRUE, '33333333C');
INSERT INTO FACTURA VALUES (5005, '2021/07/20', TRUE, '33333333C');
INSERT INTO FACTURA VALUES (5010, '2021/07/21', TRUE, '66666666H');
INSERT INTO FACTURA VALUES (5011, '2021/07/22', FALSE, '44444444C');
INSERT INTO FACTURA VALUES (5012, '2022/09/13', TRUE, '55555555D');
INSERT INTO FACTURA VALUES (5013, '2022/09/22', TRUE, '55555555D');
INSERT INTO FACTURA VALUES (5014, '2023/09/22', FALSE, '55555555D');
INSERT INTO FACTURA VALUES (5015, '2022/11/16', FALSE, '66666666H');
INSERT INTO FACTURA VALUES (5016, '2022/10/25', FALSE, '55555555D');

INSERT INTO DETALLE VALUES (1, 5000, 'CHA9', 2, 25);
INSERT INTO DETALLE VALUES (2, 5000, 'CH11', 2, 25.5);
INSERT INTO DETALLE VALUES (3, 5000, 'BAF5', 2, 7);
INSERT INTO DETALLE VALUES (4, 5000, 'BAB5', 2, 6);
INSERT INTO DETALLE VALUES (5, 5001, 'BI20', 2, 140);
INSERT INTO DETALLE VALUES (6, 5001, 'BAB5', 3, 6);
INSERT INTO DETALLE VALUES (7, 5002, 'BI20', 1, 150);
INSERT INTO DETALLE VALUES (8, 5003, 'BAB4', 10, 5);
INSERT INTO DETALLE VALUES (9, 5004, 'PA10', 2, 9);
INSERT INTO DETALLE VALUES (10, 5004, 'PA12', 2, 10);
INSERT INTO DETALLE VALUES (11, 5004, 'BAB5', 2, 6);
INSERT INTO DETALLE VALUES (12, 5005, 'BI20', 2, 140);
INSERT INTO DETALLE VALUES (13, 5010, 'CORM', 10, 5);
INSERT INTO DETALLE VALUES (14, 5011, 'CORH', 5, 10);
INSERT INTO DETALLE VALUES (15, 5012, 'CORD', 10, 60);
INSERT INTO DETALLE VALUES (16, 5013, 'CORP', 5, 30);
INSERT INTO DETALLE VALUES (17, 5014, 'CNKE', 13, 80);
INSERT INTO DETALLE VALUES (18, 5015, 'CORD', 1, 15);


-- 1. Obtén la información de todos los clientes de Madrid.
SELECT * FROM CLIENTE WHERE CIUDAD = 'MADRID';

-- 2. Obtén la información de todos los clientes que no son de Madrid.
SELECT * FROM CLIENTE WHERE CIUDAD != 'MADRID';

-- 3. Obtén la información de todos los clientes cuyo nombre comience con una de las letras entre B y G.
SELECT * FROM CLIENTE WHERE NOMBRE REGEXP '^[B-G]';

-- 4. Obtén la información de todos los clientes cuyo nombre comience con la letra D.
SELECT * FROM CLIENTE WHERE NOMBRE LIKE 'D%';

-- 5. Obtén toda la información del producto con código BAB5.
SELECT * FROM PRODUCTO WHERE CODIGO = 'BAB5';

-- 6. Obtén una relación con los productos a reponer y el dinero que hay que invertir en reponerlo. Un producto necesita reposición si cumple la condición stock < mínimo.
SELECT CODIGO, DESCRIPCION, STOCK, MINIMO-STOCK AS UNIDADES_A_REPONER, (MINIMO-STOCK)*PRECIO AS DINERO 
FROM PRODUCTO WHERE STOCK < MINIMO;

-- 7. Obtén todas las líneas de detalle de todas las facturas incluyendo también la descripción del artículo y el precio de la venta (unidades*precio). Deberás unir las tablas detalle y producto.
SELECT DETALLE.*, PRODUCTO.DESCRIPCION, DETALLE.UNIDADES * DETALLE.PRECIO AS PRECIO_VENTA 
FROM DETALLE INNER JOIN PRODUCTO ON DETALLE.CODIGO = PRODUCTO.CODIGO;

-- 8. Realiza una copia de la consulta 7 y establecer un criterio para ver las líneas de detalle de la factura 5000.
SELECT DETALLE.*, PRODUCTO.DESCRIPCION, DETALLE.UNIDADES * DETALLE.PRECIO AS PRECIO_VENTA 
FROM DETALLE INNER JOIN PRODUCTO ON DETALLE.CODIGO = PRODUCTO.CODIGO WHERE DETALLE.NUMERO = 5000;

-- 9. Realiza una copia de la consulta 7 y establecer un criterio para ver las ventas del artículo con código BAB5.
SELECT DETALLE.*, PRODUCTO.DESCRIPCION, DETALLE.UNIDADES * DETALLE.PRECIO AS PRECIO_VENTA 
FROM DETALLE INNER JOIN PRODUCTO ON DETALLE.CODIGO = PRODUCTO.CODIGO WHERE DETALLE.CODIGO = 'BAB5';

-- 10. Obtén una relación con todas las facturas incluyendo también el nombre y teléfono del cliente. Deberás unir las tablas factura y cliente.
SELECT FACTURA.*, CLIENTE.NOMBRE, CLIENTE.TLF 
FROM FACTURA INNER JOIN CLIENTE ON FACTURA.NIF = CLIENTE.NIF;

-- 11. Obtén una relación con todas las facturas incluyendo también el nombre y teléfono del cliente, así como el importe total de la factura (suma de unidades*precio para cada factura). Deberás unir las tablas cliente, factura y detalle.
SELECT FACTURA.NUMERO, CLIENTE.NOMBRE, CLIENTE.TLF, SUM(DETALLE.UNIDADES * DETALLE.PRECIO) AS IMPORTE_TOTAL
FROM FACTURA 
INNER JOIN CLIENTE ON FACTURA.NIF = CLIENTE.NIF
INNER JOIN DETALLE ON FACTURA.NUMERO = DETALLE.NUMERO
GROUP BY FACTURA.NUMERO;

-- 12. Realizar una copia de la consulta 11 y establecer el siguiente criterio: sólo las facturas del cliente DELGADO PEREZ MARISA.
SELECT FACTURA.NUMERO, CLIENTE.NOMBRE, CLIENTE.TLF, SUM(DETALLE.UNIDADES * DETALLE.PRECIO) AS IMPORTE_TOTAL
FROM FACTURA 
INNER JOIN CLIENTE ON FACTURA.NIF = CLIENTE.NIF
INNER JOIN DETALLE ON FACTURA.NUMERO = DETALLE.NUMERO
WHERE CLIENTE.NOMBRE = 'DELGADO PEREZ MARISA'
GROUP BY FACTURA.NUMERO;

-- 13. Realizar una copia de la consulta 11 y establecer el siguiente criterio: sólo las facturas pagadas.
SELECT FACTURA.NUMERO, CLIENTE.NOMBRE, CLIENTE.TLF, SUM(DETALLE.UNIDADES * DETALLE.PRECIO) AS IMPORTE_TOTAL
FROM FACTURA 
INNER JOIN CLIENTE ON FACTURA.NIF = CLIENTE.NIF
INNER JOIN DETALLE ON FACTURA.NUMERO = DETALLE.NUMERO
WHERE FACTURA.PAGADO = TRUE
GROUP BY FACTURA.NUMERO;

-- 14. Realizar una copia de la consulta 11 y establecer el siguiente criterio: sólo las facturas pendientes de pago.
SELECT FACTURA.NUMERO, CLIENTE.NOMBRE, CLIENTE.TLF, SUM(DETALLE.UNIDADES * DETALLE.PRECIO) AS IMPORTE_TOTAL
FROM FACTURA 
INNER JOIN CLIENTE ON FACTURA.NIF = CLIENTE.NIF
INNER JOIN DETALLE ON FACTURA.NUMERO = DETALLE.NUMERO
WHERE FACTURA.PAGADO = FALSE
GROUP BY FACTURA.NUMERO;

-- 15. Realizar una copia de la consulta 11 y establecer el siguiente criterio: facturas de septiembre.
SELECT FACTURA.NUMERO, CLIENTE.NOMBRE, CLIENTE.TLF, SUM(DETALLE.UNIDADES * DETALLE.PRECIO) AS IMPORTE_TOTAL
FROM FACTURA 
INNER JOIN CLIENTE ON FACTURA.NIF = CLIENTE.NIF
INNER JOIN DETALLE ON FACTURA.NUMERO = DETALLE.NUMERO
WHERE MONTH(FACTURA.FECHA) = 9
GROUP BY FACTURA.NUMERO;

-- 16. Realizar una copia de la consulta 11 y establecer el siguiente criterio: facturas con importe entre 10 y 20 euros.
SELECT FACTURA.NUMERO, CLIENTE.NOMBRE, CLIENTE.TLF, SUM(DETALLE.UNIDADES * DETALLE.PRECIO) AS IMPORTE_TOTAL
FROM FACTURA 
INNER JOIN CLIENTE ON FACTURA.NIF = CLIENTE.NIF
INNER JOIN DETALLE ON FACTURA.NUMERO = DETALLE.NUMERO
GROUP BY FACTURA.NUMERO
HAVING IMPORTE_TOTAL BETWEEN 10 AND 20;

-- 17. Obtén el importe total de todas las facturas pagadas. Debe salir una sola cifra con la suma de los importes de todas las facturas.
SELECT SUM(DETALLE.UNIDADES * DETALLE.PRECIO) AS IMPORTE_TOTAL
FROM FACTURA 
INNER JOIN DETALLE ON FACTURA.NUMERO = DETALLE.NUMERO
WHERE FACTURA.PAGADO = TRUE;

-- 18. Obtén el importe total de todas las facturas de ROSA PEREZ DELGADO.
SELECT SUM(DETALLE.UNIDADES * DETALLE.PRECIO) AS IMPORTE_TOTAL
FROM FACTURA 
INNER JOIN CLIENTE ON FACTURA.NIF = CLIENTE.NIF
INNER JOIN DETALLE ON FACTURA.NUMERO = DETALLE.NUMERO
WHERE CLIENTE.NOMBRE = 'ROSA PEREZ DELGADO';

-- 19. Obtén una relación de artículos junto a la suma de las unidades totales vendidas y el importe recaudado de dichas ventas.
SELECT PRODUCTO.CODIGO, PRODUCTO.DESCRIPCION, SUM(DETALLE.UNIDADES) AS UNIDADES_VENDIDAS, SUM(DETALLE.UNIDADES * DETALLE.PRECIO) AS IMPORTE_RECAUDADO
FROM PRODUCTO 
INNER JOIN DETALLE ON PRODUCTO.CODIGO = DETALLE.CODIGO
GROUP BY PRODUCTO.CODIGO;

-- 20. Obtén una relación de clientes junto con el número total de facturas que tiene cada uno (cuenta de facturas de cada cliente).
SELECT CLIENTE.NIF, CLIENTE.NOMBRE, COUNT(FACTURA.NUMERO) AS NUMERO_FACTURAS
FROM CLIENTE 
INNER JOIN FACTURA ON CLIENTE.NIF = FACTURA.NIF
GROUP BY CLIENTE.NIF;

-- 21. Basándonos en el ejercicio 6, obtén el importe total a invertir en la reposición de artículos.
SELECT SUM((MINIMO-STOCK)*PRECIO) AS DINERO_TOTAL 
FROM PRODUCTO WHERE STOCK < MINIMO;

-- 22. Aumentar un 3% el precio del artículo BAF4.
UPDATE PRODUCTO SET PRECIO = PRECIO * 1.03 WHERE CODIGO = 'BAF4';

-- 23. Añade la factura 5010 con fecha de hoy.
INSERT INTO FACTURA VALUES (5017, '2021/05/07', FALSE, '11111111A');

-- 24. Borra la factura 5010.
DELETE FROM FACTURA WHERE NUMERO = 5017;

-- 25. Obtén la relación de productos junto al número de unidades vendidas de cada uno.
SELECT PRODUCTO.CODIGO, PRODUCTO.DESCRIPCION, SUM(DETALLE.UNIDADES) AS UNIDADES_VENDIDAS
FROM PRODUCTO 
INNER JOIN DETALLE ON PRODUCTO.CODIGO = DETALLE.CODIGO
GROUP BY PRODUCTO.CODIGO;